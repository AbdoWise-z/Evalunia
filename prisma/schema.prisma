// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid()) @map("_id")
  clerk_id String @unique
  name     String
  imageUrl String
  email    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages               Message[]
  Reviews                Review[]
  EmbeddingReviewVectors EmbeddingReviewVector[]
}

model Professor {
  id String @id @default(uuid()) @map("_id")

  name           String
  email          String?
  imageUrl       String?
  address        String?
  phone          String?
  tags           String[]
  school         String?
  birthDate      DateTime?
  qualifications String?
  summary        String //a summary about the professor's personalliy, life, etc ..

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Reviews                Review[]
  EmbeddingVectors       EmbeddingVector[]
  EmbeddingReviewVectors EmbeddingReviewVector[]
}

model Review {
  id String @id @default(uuid()) @map("_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review String

  prof        Professor @relation(fields: [professorId], references: [id])
  professorId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  Rating Float
}

model EmbeddingVector {
  id String @id @default(uuid()) @map("_id")

  PineCodeId  String
  prof        Professor @relation(fields: [professorId], references: [id])
  professorId String
}

model EmbeddingReviewVector {
  id String @id @default(uuid()) @map("_id")

  PineCodeId String

  prof        Professor @relation(fields: [professorId], references: [id])
  professorId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum MessageRole {
  AI
  User
}

model Message {
  id String @id @default(uuid()) @map("_id")

  content   String
  role      MessageRole
  contentDB String?

  referencedProfs String[]

  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

